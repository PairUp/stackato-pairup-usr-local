.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XXX 3"
.TH XXX 3 "2011-09-05" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XXX \- See Your Data in the Nude
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    use XXX;
\&    XXX my $dog = Dog\->new({has => [\*(Aqfleas\*(Aq, \*(Aqstyle\*(Aq]});
\&    my $dog = XXX Dog\->new({has => [\*(Aqfleas\*(Aq, \*(Aqstyle\*(Aq]});
\&    my $dog = Dog\->new(XXX {has => [\*(Aqfleas\*(Aq, \*(Aqstyle\*(Aq]});
\&    my $dog = Dog\->new({XXX has => [\*(Aqfleas\*(Aq, \*(Aqstyle\*(Aq]});
\&    my $dog = Dog\->new({has => XXX [\*(Aqfleas\*(Aq, \*(Aqstyle\*(Aq]});
\&    my $dog = Dog\->new({has => [XXX \*(Aqfleas\*(Aq, \*(Aqstyle\*(Aq]});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1XXX\s0.pm exports a function called \s-1XXX\s0 that you can put just about
anywhere in your Perl code to make it die with a \s-1YAML\s0 dump of the
arguments to its right.
.PP
The charm of XXX-debugging is that it is easy to type, rarely requires
parens and stands out visually so that you remember to remove it.
.PP
\&\s-1XXX\s0.pm also exports \s-1WWW\s0, \s-1YYY\s0 and \s-1ZZZ\s0 which do similar debugging things.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\s-1WWW\s0" 4
.IX Item "WWW"
\&\s-1WWW\s0 will warn a dump of its arguments, and then return the original
arguments. This means you can stick it in the middle of expressions.
.Sp
\&\s-1NOTE:\s0 If you use \s-1WWW\s0 with Test::More, it will <\fIdiag()\fR> rather than \f(CW\*(C`warn()\*(C'\fR.
.Sp
mnemonic: W for warn
.IP "\s-1XXX\s0" 4
.IX Item "XXX"
\&\s-1XXX\s0 will die with a dump of its arguments.
.Sp
mnemonic: \s-1XXX\s0 == Death, Nudity
.IP "\s-1YYY\s0" 4
.IX Item "YYY"
\&\s-1YYY\s0 will print a dump of its arguments, and then return the original
arguments. This means you can stick it in the middle of expressions.
.Sp
\&\s-1NOTE:\s0 If you use \s-1YYY\s0 with Test::More, it will <\fInote()\fR> rather than \f(CW\*(C`print()\*(C'\fR.
.Sp
mnemonic: \s-1YYY\s0 == Why Why Why??? or \s-1YAML\s0 \s-1YAML\s0 \s-1YAML\s0
.IP "\s-1ZZZ\s0" 4
.IX Item "ZZZ"
\&\s-1ZZZ\s0 will Carp::confess a dump of its arguments.
.Sp
mnemonic: You should confess all your sins before you sleep. zzzzzzzz
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
By default, \s-1XXX\s0 uses \s-1YAML\s0.pm to dump your data. You can change this like so:
.PP
.Vb 3
\&    use XXX \-with => \*(AqData::Dumper\*(Aq;
\&    use XXX \-with => \*(AqYAML::XS\*(Aq;
\&    use XXX \-with => \*(AqYAML::SomeOtherYamlModule\*(Aq;
.Ve
.PP
Only modules with names beginning with '\s-1YAML\s0' and the Data::Dumper
module are supported.
.PP
If you need to load \s-1XXX\s0 with \f(CW\*(C`require\*(C'\fR, you can set the dumper module
with the \f(CW$XXX::DumpModule\fR global variable.
.PP
.Vb 2
\&    require XXX;
\&    $XXX::DumpModule = \*(AqYAML::Syck\*(Aq;
\&    
\&    XXX::XXX($variable);
.Ve
.SH "STACK TRACE LEVEL"
.IX Header "STACK TRACE LEVEL"
If you call a debugging function that calls \s-1XXX\s0 for you, \s-1XXX\s0 will print the
wrong file and line number. To force \s-1XXX\s0 to skip a package in the call stack,
just define the \f(CW\*(C`XXX_skip\*(C'\fR constant like this:
.PP
.Vb 6
\&    package MyDebugger;
\&    use constant XXX_skip => 1;
\&    sub debug {
\&        require XXX;
\&        XXX::XXX(@_);
\&    }
.Ve
.PP
Now calls to MyDebugger::debug will print the file name you called it from,
not from MyDebugger itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ingy do\*:t Net <ingy@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2006, 2008, 2010\-2011. Ingy do\*:t Net.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See http://www.perl.com/perl/misc/Artistic.html
