.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CGI::Emulate::PSGI 3"
.TH CGI::Emulate::PSGI 3 "2011-10-31" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CGI::Emulate::PSGI \- PSGI adapter for CGI
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    my $app = CGI::Emulate::PSGI\->handler(sub {
\&        # Existing CGI code
\&    });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module allows an application designed for the \s-1CGI\s0 environment to
run in a \s-1PSGI\s0 environment, and thus on any of the backends that \s-1PSGI\s0
supports.
.PP
It works by translating the environment provided by the \s-1PSGI\s0
specification to one expected by the \s-1CGI\s0 specification. Likewise, it
captures output as it would be prepared for the \s-1CGI\s0 standard, and
translates it to the format expected for the \s-1PSGI\s0 standard using
CGI::Parse::PSGI module.
.SH "CGI.pm"
.IX Header "CGI.pm"
If your application uses \s-1CGI\s0, be sure to cleanup the global
variables in the handler loop yourself, so:
.PP
.Vb 6
\&    my $app = CGI::Emulate::PSGI\->handler(sub {
\&        use CGI;
\&        CGI::initialize_globals();
\&        my $q = CGI\->new;
\&        # ...
\&    });
.Ve
.PP
Otherwise previous request variables will be reused in the new
requests.
.PP
Alternatively, you can install and use CGI::Compile from \s-1CPAN\s0 and
compiles your existing \s-1CGI\s0 scripts into a sub that is perfectly ready
to be converted to \s-1PSGI\s0 application using this module.
.PP
.Vb 2
\&  my $sub = CGI::Compile\->compile("/path/to/script.cgi");
\&  my $app = CGI::Emulate::PSGI\->handler($sub);
.Ve
.PP
This will take care of assigning an unique namespace for each script
etc. See CGI::Compile for details.
.PP
You can also consider using \s-1CGI::PSGI\s0 but that would require you to
slightly change your code from:
.PP
.Vb 3
\&  my $q = CGI\->new;
\&  # ...
\&  print $q\->header, $output;
.Ve
.PP
into:
.PP
.Vb 1
\&  use CGI::PSGI;
\&
\&  my $app = sub {
\&      my $env = shift;
\&      my $q = CGI::PSGI\->new($env);
\&      # ...
\&      return [ $q\->psgi_header, [ $output ] ];
\&  };
.Ve
.PP
See \s-1CGI::PSGI\s0 for details.
.SH "METHODS"
.IX Header "METHODS"
.IP "handler" 4
.IX Item "handler"
.Vb 1
\&  my $app = CGI::Emulate::PSGI\->handler($code);
.Ve
.Sp
Creates a \s-1PSGI\s0 application code reference out of \s-1CGI\s0 code reference.
.IP "emulate_environment" 4
.IX Item "emulate_environment"
.Vb 1
\&  my %env = CGI::Emulate::PSGI\->emulate_environment($env);
.Ve
.Sp
Creates an environment hash out of \s-1PSGI\s0 environment hash. If your code
or framework just needs an environment variable emulation, use this
method like:
.Sp
.Vb 2
\&  local %ENV = (%ENV, CGI::Emulate::PSGI\->emulate_environment($env));
\&  # run your application
.Ve
.Sp
If you use \f(CW\*(C`handler\*(C'\fR method to create a \s-1PSGI\s0 environment hash, this
is automatically called in the created application.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tokuhiro Matsuno <tokuhirom@cpan.org>
.PP
Tatsuhiko Miyagawa
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2009\-2010 by tokuhirom.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1PSGI\s0 CGI::Compile \s-1CGI::PSGI\s0 Plack CGI::Parse::PSGI
