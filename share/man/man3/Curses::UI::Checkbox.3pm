.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Curses::UI::Checkbox 3pm"
.TH Curses::UI::Checkbox 3pm "2011-09-01" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Curses::UI::Checkbox \- Create and manipulate checkbox widgets
.SH "VERSION"
.IX Header "VERSION"
Version 1.11
.SH "CLASS HIERARCHY"
.IX Header "CLASS HIERARCHY"
.Vb 5
\& Curses::UI::Widget
\&    |
\&    +\-\-\-\-Curses::UI::Container
\&            |
\&            +\-\-\-\-Curses::UI::Checkbox
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Curses::UI;
\&    my $cui = new Curses::UI;
\&    my $win = $cui\->add(\*(Aqwindow_id\*(Aq, \*(AqWindow\*(Aq);
\&
\&    my $checkbox = $win\->add(
\&        \*(Aqmycheckbox\*(Aq, \*(AqCheckbox\*(Aq,
\&        \-label     => \*(AqSay hello to the world\*(Aq,
\&        \-checked   => 1,
\&    );
\&
\&    $checkbox\->focus();
\&    my $checked = $checkbox\->get();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Curses::UI::Checkbox provides a checkbox widget.
.PP
A checkbox is a control for a boolean value (an on/off toggle). It
consists of a box which will either be empty (indicating \fBoff\fR or
\&\fBfalse\fR) or contain an \f(CW\*(C`X\*(C'\fR (indicating \fBon\fR or \fBtrue\fR). Following
this is a text label which described the value being controlled.
.PP
.Vb 2
\&    [X] This checkbox is on/true/checked/selected
\&    [ ] This checkbox is off/false/unchecked/deselected
.Ve
.PP
See exampes/demo\-Curses::UI::Checkbox in the distribution for a short
demo.
.SH "STANDARD OPTIONS"
.IX Header "STANDARD OPTIONS"
.Vb 6
\&    \-x  \-y   \-width    \-height
\&    \-pad     \-padleft  \-padright  \-padtop  \-padbottom
\&    \-ipad    \-ipadleft \-ipadright \-ipadtop \-ipadbottom
\&    \-title   \-titlefullwidth      \-titlereverse
\&    \-onfocus \-onblur
\&    \-parent
.Ve
.PP
See Curses::UI::Widget for an explanation of
these.
.SH "WIDGET-SPECIFIC OPTIONS"
.IX Header "WIDGET-SPECIFIC OPTIONS"
.SS "\-label"
.IX Subsection "-label"
Sets the initial label for the checkbox widget to the passed string or
value.
.SS "\-checked"
.IX Subsection "-checked"
Takes a boolean argument. Determines if the widget's initial state is
checked or unchecked.  The default is false (unchecked).
.SS "\-onchange"
.IX Subsection "-onchange"
Expects a coderef and sets it as a callback for the widget. When the
checkbox's state is changed, the given code will be executed.
.SH "STANDARD METHODS"
.IX Header "STANDARD METHODS"
.Vb 2
\&    layout draw    intellidraw
\&    focus  onFocus onBlur
.Ve
.PP
See Curses::UI::Widget for an explanation of
these.
.SH "WIDGET-SPECIFIC METHODS"
.IX Header "WIDGET-SPECIFIC METHODS"
.SS "get"
.IX Subsection "get"
Returns the current state of the checkbox (0 == unchecked, 1 ==
checked).
.SS "check"
.IX Subsection "check"
Sets the checkbox to \*(L"checked\*(R".
.SS "uncheck"
.IX Subsection "uncheck"
Sets the checkbox to \*(L"unchecked\*(R".
.SS "toggle"
.IX Subsection "toggle"
Flip-flops the checkbox to its \*(L"other\*(R" state. If the checkbox is
unchecked then it will become checked, and vice versa.
.SS "onChange"
.IX Subsection "onChange"
This method can be used to set the \f(CW\*(C`\-onchange\*(C'\fR event handler (see
above) after initialization of the checkbox. It expects a coderef as
its argument.
.SH "DEFAULT BINDINGS"
.IX Header "DEFAULT BINDINGS"
.ie n .IP """[TAB]"", ""[ENTER}""" 4
.el .IP "\f(CW[TAB]\fR, \f(CW[ENTER}\fR" 4
.IX Item "[TAB], [ENTER}"
Call the 'loose\-focus' routine, causing the widget to lose focus.
.ie n .IP """[SPACE]""" 4
.el .IP "\f(CW[SPACE]\fR" 4
.IX Item "[SPACE]"
Call the \*(L"toggle\*(R" method.
.ie n .IP "0, ""n""" 4
.el .IP "\f(CW0\fR, \f(CWn\fR" 4
.IX Item "0, n"
Call the \*(L"uncheck\*(R" method.
.ie n .IP "1, ""y""" 4
.el .IP "\f(CW1\fR, \f(CWy\fR" 4
.IX Item "1, y"
Call the \*(L"check\*(R" method.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Curses::UI,
Curses::UI::Widget,
Curses::UI::Common
.SH "AUTHOR"
.IX Header "AUTHOR"
Shawn Boyette \f(CW\*(C`<mdxi@cpan.org>\*(C'\fR
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2001\-2002 Maurice Makaay; 2003\-2006 Marcus Thiesen; 2007
Shawn Boyette. All Rights Reserved.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
This package is free software and is provided \*(L"as is\*(R" without express
or implied warranty. It may be used, redistributed and/or modified
under the same terms as perl itself.
