.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mo 3"
.TH Mo 3 "2011-10-02" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
Mo \- Micro Objects. Mo is less.
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 3
\&    package Less;
\&    use Mo;
\&    extends \*(AqNothing\*(Aq;
\&
\&    has something => ();
.Ve
.SH "Description"
.IX Header "Description"
use Mo. Mo is less. Much less.
.PP
Moose is huge. Moose led to Mouse led to Moo led to Mo. M is nothing. Mo is
more. Not much.
.PP
When Moo is more than you need, drop an 'o' and get some Mo.
.PP
To get just a little Mo from Mo, use \*(L"Mo Features\*(R" below.
.SH "Core Features"
.IX Header "Core Features"
This is what you get. Nothing Mo.
.ie n .IP """new"" method" 4
.el .IP "\f(CWnew\fR method" 4
.IX Item "new method"
Mo provides a \f(CW\*(C`new\*(C'\fR object constructor. You pass it a list of name/value
pairs and it returns a new object.
.Sp
Constructor will not call \s-1BUILD\s0 metthods. This is available using the
Mo::build feature.
.ie n .IP """extends""" 4
.el .IP "\f(CWextends\fR" 4
.IX Item "extends"
Mo exports the \f(CW\*(C`extends\*(C'\fR keyword, to declare your parent class. \f(CW\*(C`Mo::Object\*(C'\fR
itself is your default parent class.
.Sp
Mo only supports single inheritance. If you need multiple inheritance or
roles, you should upgrade to Moo.
.ie n .IP """has""" 4
.el .IP "\f(CWhas\fR" 4
.IX Item "has"
Mo exports a \f(CW\*(C`has\*(C'\fR keyword, to generate accessors.
.Sp
These accessors always support both \f(CW\*(C`get\*(C'\fR and \f(CW\*(C`set\*(C'\fR operations. That's it.
.Sp
.Vb 2
\&    has name => ();
\&    has thing => (foo => \*(Aqbar\*(Aq);  # arguments silently ignored
.Ve
.Sp
All arguments passed to \f(CW\*(C`has\*(C'\fR are ignored. This makes it easier to switch
between Mo and Moo, without having to change all your accessors.
.ie n .IP """strict"" and ""warnings""" 4
.el .IP "\f(CWstrict\fR and \f(CWwarnings\fR" 4
.IX Item "strict and warnings"
Mo turns on \f(CW\*(C`use strict\*(C'\fR and \f(CW\*(C`use warnings\*(C'\fR for you.
.IP "Embeddable" 4
.IX Item "Embeddable"
Mo is tiny. It is compressed into a single line. You can easily inline it in
your code, should you want to do that. See Mo::Inline for more information,
including a utility that will do it for you.
.SH "Mo Features"
.IX Header "Mo Features"
Mo is the bare minimum needed for Perl \s-1OO\s0. Many times you'll want just a
couple more features. Don't worry. Mo's got you covered:
.PP
.Vb 10
\&    use Mo qw\*(Aqbuild default builder coerce is required\*(Aq;
\&    has name1 => ( default => sub { \*(AqJoe\*(Aq } );
\&    has name2 => ( builder => \*(Aqname_builder\*(Aq );
\&    has name3 => ( coerce => sub {$_[0]} );
\&    has name4 => ( is => \*(Aqro\*(Aq );
\&    has name4 => ( required => 1 );
\&    sub BUILD {
\&        my $self = shift;
\&        ...
\&    }
.Ve
.PP
Mo simply loads the feature classes Mo::build, Mo::default,
Mo::builder, Mo::coerce, Mo::is and Mo::required. 
The first one supports \s-1BUILD\s0 constructing and the other three
add their magics to \f(CW\*(C`has\*(C'\fR. A Mo::Feature module can enhance \f(CW\*(C`new\*(C'\fR,
\&\f(CW\*(C`extends\*(C'\fR and \f(CW\*(C`has\*(C'\fR, and also add new export subs, or remove existing ones.
Features can also be combined for a single accessor.
See Mo::Features for a list of all the features and for an explanation of
the Feature \s-1API\s0..
.SH "See"
.IX Header "See"
Mo::Features
.PP
Mo::Inlining
.PP
Mo::Hacking
.PP
Mo::Design
.SH "Authors"
.IX Header "Authors"
Ingy do\*:t Net <ingy@cpan.org>
.PP
Damien 'dams' Krotkine <dams@cpan.org>
.PP
Matt S. Trout (mst) <mst@shadowcat.co.uk>
.PP
Christian Walde <walde.christian@googlemail.com>
.PP
Alessandro Ranellucci (aar/alexrj) <aar@cpan.org>
.SH "Copyright and License"
.IX Header "Copyright and License"
Copyright (c) 2011. Ingy do\*:t Net.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See http://www.perl.com/perl/misc/Artistic.html
