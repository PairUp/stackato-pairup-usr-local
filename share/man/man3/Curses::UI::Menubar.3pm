.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Curses::UI::Menubar 3pm"
.TH Curses::UI::Menubar 3pm "2011-09-01" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Curses::UI::Menubar \- Create and manipulate menubar widgets
.SH "CLASS HIERARCHY"
.IX Header "CLASS HIERARCHY"
.Vb 7
\& Curses::UI::Widget
\&    |
\&    +\-\-\-\-Curses::UI::Container
\&            |
\&            +\-\-\-\-Curses::UI::Window
\&                    |
\&                    +\-\-\-\-Curses::UI::Menubar
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Curses::UI;
\&    my $cui = new Curses::UI;
\&
\&    # define the menu datastructure.
\&    my $menu_data = [....]; 
\&
\&    my $menu = $cui\->add( 
\&        \*(Aqmenu\*(Aq, \*(AqMenubar\*(Aq,
\&        \-menu => $menu_data
\&    );
\&
\&    $menu\->focus();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class can be used to add a menubar to Curses::UI. This
menubar can contain a complete submenu hierarchy. It looks
(remotely :\-) like this:
.PP
.Vb 12
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& menu1 | menu2 | menu3 | ....
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&       +\-\-\-\-\-\-\-\-\-\-\-\-\-+ 
\&       |menuitem 1   |
\&       |menuitem 2   |+\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&       |menuitem 3 >>||submenuitem 1 |
\&       |menuitem 4   ||submenuitem 2 |
\&       +\-\-\-\-\-\-\-\-\-\-\-\-\-+|submenuitem 3 | 
\&                      |submenuitem 4 | 
\&                      |submenuitem 5 |
\&                      +\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.PP
See exampes/demo\-Curses::UI::Menubar in the distribution
for a short demo.
.SH "STANDARD OPTIONS"
.IX Header "STANDARD OPTIONS"
This class does not use any of the standard options that
are provided by Curses::UI::Widget.
.SH "WIDGET-SPECIFIC OPTIONS"
.IX Header "WIDGET-SPECIFIC OPTIONS"
There is only one option: \fB\-menu\fR. The value for this
option is an \s-1ARRAYREF\s0. This \s-1ARRAYREF\s0 behaves exactly
like the one that is described in
Curses::UI::MenuListbox.
The difference is that for the top-level menu, you 
will only use \-submenu's. Example data structure:
.PP
.Vb 5
\&    my $menu1 = [
\&        { \-label => \*(Aqoption 1\*(Aq, \-value => \*(Aq1\-1\*(Aq },
\&        { \-label => \*(Aqoption 2\*(Aq, \-value => \*(Aq1\-2\*(Aq },
\&        { \-label => \*(Aqoption 3\*(Aq, \-value => \*(Aq1\-3\*(Aq },
\&    ];
\&
\&    my $menu2 = [
\&        { \-label => \*(Aqoption 1\*(Aq, \-value => \e&sel1 },
\&        { \-label => \*(Aqoption 2\*(Aq, \-value => \e&sel2 },
\&        { \-label => \*(Aqoption 3\*(Aq, \-value => \e&sel3 },
\&    ];
\&
\&    my $submenu = [
\&        { \-label => \*(Aqsuboption 1\*(Aq, \-value => \*(Aq3\-3\-1\*(Aq },
\&        { \-label => \*(Aqsuboption 2\*(Aq, \-callback=> \e&do_it },
\&    ];
\&
\&    my $menu3 = [
\&        { \-label => \*(Aqoption 1\*(Aq, \-value => \e&sel2 },
\&        { \-label => \*(Aqoption 2\*(Aq, \-value => \e&sel3 },
\&        { \-label => \*(Aqsubmenu 1\*(Aq, \-submenu => $submenu },
\&    ];
\&
\&    my $menu = [
\&        { \-label => \*(Aqmenu 1\*(Aq, \-submenu => $menu1 },
\&        { \-label => \*(Aqmenu 2\*(Aq, \-submenu => $menu2 }
\&        { \-label => \*(Aqmenu 3\*(Aq, \-submenu => $menu3 }
\&    ];
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\(bu" 4
\&\fBnew\fR ( \s-1OPTIONS\s0 )
.IP "\(bu" 4
\&\fBlayout\fR ( )
.IP "\(bu" 4
\&\fBdraw\fR ( \s-1BOOLEAN\s0 )
.IP "\(bu" 4
\&\fBfocus\fR ( )
.Sp
These are standard methods. See Curses::UI::Widget
for an explanation of these.
.SH "DEFAULT BINDINGS"
.IX Header "DEFAULT BINDINGS"
.IP "\(bu" 4
<\fBescape\fR>
.Sp
Call the 'escape' routine. This will have the menubar
loose its focus and return the value '\s-1ESCAPE\s0' to the
calling routine.
.IP "\(bu" 4
<\fBtab\fR>
.Sp
Call the 'return' routine. This will have the menubar
loose its focus and return the value '\s-1LOOSE_FOCUS\s0' to
the calling routine.
.IP "\(bu" 4
<\fBcursor-down\fR>, <\fBj\fR>, <\fBenter\fR>
.Sp
Call the 'pulldown' routine. This will open the 
menulistbox for the current menu and give that
menulistbox the focus. What happens after the
menulistbox loses its focus, depends upon the
returnvalue of it:
.Sp
* the value '\s-1CURSOR_LEFT\s0'
.Sp
.Vb 3
\&  Call the \*(Aqcursor\-left\*(Aq routine and after that
\&  call the \*(Aqpulldown\*(Aq routine. So this will open
\&  the menulistbox for the previous menu.
.Ve
.Sp
* the value '\s-1CURSOR_RIGHT\s0'
.Sp
.Vb 3
\&  Call the \*(Aqcursor\-right\*(Aq routine and after that
\&  call the \*(Aqpulldown\*(Aq routine. So this will open
\&  the menulistbox for the next menu.
.Ve
.Sp
* the value '\s-1LOOSE_FOCUS\s0'
.Sp
.Vb 2
\&  The menubar will keep the focus, but no
\&  menulistbox will be open.
.Ve
.Sp
* the value '\s-1ESCAPE\s0'
.Sp
.Vb 2
\&  The menubar will loose its focus and return the
\&  value \*(AqESCAPE\*(Aq to the calling routine.
.Ve
.Sp
* A \s-1CODE\s0 reference
.Sp
.Vb 3
\&  The code will be excuted, the menubar will loose its
\&  focus and the returnvalue of the CODE will be 
\&  returned to the calling routine.
.Ve
.Sp
* Any other value
.Sp
.Vb 2
\&  The menubar will loose its focus and the value will
\&  be returned to the calling routine.
.Ve
.IP "\(bu" 4
<\fBcursor-left\fR>, <\fBh\fR>
.Sp
Call the 'cursor\-left' routine. This will select
the previous menu. If the first menu is already
selected, the last menu will be selected.
.IP "\(bu" 4
<\fBcursor-right\fR>, <\fBl\fR>
.Sp
Call the 'cursor\-right' routine. This will select
the next menu. If the last menu is already selected,
the first menu will be selected.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Curses::UI, 
Curses::UI::MenuListbox, 
Curses::UI::Listbox
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (c) 2001\-2002 Maurice Makaay. All rights reserved.
.PP
Maintained by Marcus Thiesen (marcus@cpan.thiesenweb.de)
.PP
This package is free software and is provided \*(L"as is\*(R" without express
or implied warranty. It may be used, redistributed and/or modified
under the same terms as perl itself.
