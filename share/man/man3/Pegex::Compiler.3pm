.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pegex::Compiler 3pm"
.TH Pegex::Compiler 3pm "2011-11-05" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    use Pegex::Compiler;
\&    my $grammar_text = \*(Aq... grammar text ...\*(Aq;
\&    my $pegex_compiler = Pegex::Compiler\->new();
\&    my $grammar_tree = $pegex_compiler\->compile($grammar_text)\->tree;
.Ve
.PP
or:
.PP
.Vb 1
\&    perl \-Ilib \-MYourGrammarModule=compile
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Pegex::Compiler transforms a Pegex grammar string (or file) into a
compiled form. The compiled form is known as a grammar tree, which is simply a
nested data structure.
.PP
The grammar tree can be serialized to \s-1YAML\s0, \s-1JSON\s0, Perl, or any other
programming language. This makes it extremely portable. Pegex::Grammar has
methods for serializing to all these forms.
.SH "METHODS"
.IX Header "METHODS"
The following public methods are available:
.ie n .IP "$compiler = Pegex::Compiler\->\fInew()\fR;" 4
.el .IP "\f(CW$compiler\fR = Pegex::Compiler\->\fInew()\fR;" 4
.IX Item "$compiler = Pegex::Compiler->new();"
Return a new Pegex::Compiler object.
.ie n .IP "$grammar_tree = $compiler\->compile($grammar_input);" 4
.el .IP "\f(CW$grammar_tree\fR = \f(CW$compiler\fR\->compile($grammar_input);" 4
.IX Item "$grammar_tree = $compiler->compile($grammar_input);"
Compile a grammar text into a grammar tree that can be used by a
Pegex::Parser. This method is calls the \f(CW\*(C`parse\*(C'\fR and \f(CW\*(C`combinate\*(C'\fR methods and
returns the resulting tree.
.Sp
Input can be a string, a string ref, a file path, a file handle, or a
Pegex::Input object. Return \f(CW$self\fR so you can chain it to other methods.
.ie n .IP "$compiler\->parse($grammar_text)" 4
.el .IP "\f(CW$compiler\fR\->parse($grammar_text)" 4
.IX Item "$compiler->parse($grammar_text)"
The first step of a \f(CW\*(C`compile\*(C'\fR is \f(CW\*(C`parse\*(C'\fR. This applies the Pegex language
grammar to your grammar text and produces an unoptimized tree.
.Sp
This method returns \f(CW$self\fR so you can chain it to other methods.
.ie n .IP "$compiler\->\fIcombinate()\fR" 4
.el .IP "\f(CW$compiler\fR\->\fIcombinate()\fR" 4
.IX Item "$compiler->combinate()"
Before a Pegex grammar tree can be used to parse things, it needs to be
combinated. This process turns the regex tokens into real regexes. It also
combines some rules together and eliminates rules that are not needed or have
been combinated. The result is a Pegex grammar tree that can be used by a
Pegex::Parser.
.Sp
\&\s-1NOTE:\s0 While the parse phase of a compile is always the same for various
programming langugaes, the combinate phase takes into consideration and
special needs of the target language. Pegex::Compiler only combinates for
Perl, although this is often sufficient in similar languages like Ruby or
Python (\s-1PCRE\s0 based regexes). Languages like Java probably need to use their
own combinators.
.ie n .IP "$compiler\->\fItree()\fR" 4
.el .IP "\f(CW$compiler\fR\->\fItree()\fR" 4
.IX Item "$compiler->tree()"
Return the current state of the grammar tree (as a hash ref).
.ie n .IP "$compiler\->\fIto_yaml()\fR" 4
.el .IP "\f(CW$compiler\fR\->\fIto_yaml()\fR" 4
.IX Item "$compiler->to_yaml()"
Serialize the current grammar tree to \s-1YAML\s0.
.ie n .IP "$compiler\->\fIto_json()\fR" 4
.el .IP "\f(CW$compiler\fR\->\fIto_json()\fR" 4
.IX Item "$compiler->to_json()"
Serialize the current grammar tree to \s-1JSON\s0.
.ie n .IP "$compiler\->\fIto_perl()\fR" 4
.el .IP "\f(CW$compiler\fR\->\fIto_perl()\fR" 4
.IX Item "$compiler->to_perl()"
Serialize the current grammar tree to Perl.
.SH "IN PLACE COMPILATION"
.IX Header "IN PLACE COMPILATION"
When you write a Pegex based module you will want to precompile your grammar
into Perl so that it has no load penalty. Pegex::Grammar provides a special
mechanism for this. Say you have a class like this:
.PP
.Vb 3
\&    package MyThing::Grammar;
\&    use Pegex::Mo;
\&    extends \*(AqPegex::Grammar\*(Aq;
\&
\&    use constant text => \*(Aq../mything\-grammar\-repo/mything.pgx\*(Aq;
\&    sub tree {
\&    }
.Ve
.PP
Simply use this command:
.PP
.Vb 1
\&    perl \-Ilib \-MMyThing::Grammar=compile
.Ve
.PP
and Pegex::Grammar will call Pegex::Compile to put your compiled grammar
inside your \f(CW\*(C`tree\*(C'\fR subroutine. It will actually write the text into your
module. This makes it trivial to update your grammar module after making
changes to the grammar file.
.PP
See Pegex::JSON for an example.
