.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pegex::Regex 3pm"
.TH Pegex::Regex 3pm "2011-11-05" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pegex::Regex \- Use Pegex Like a Regex
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    {
\&        # Turn on Pegex regular expressions in lexical scope.
\&        use Pegex::Regex;
\&        my $grammar = qr{$grammar_text}x;
\&        $text =~ $grammar;
\&        my $data = \e%/;
\&
\&        # Turn off Pegex in this scope.
\&        no Pegex::Regex;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a trivial sugar module that lets you use Pegex parser grammars like
regular expressions, if you're into that kind of thing.
.PP
This is basically a clone of Damian Conway's Regexp::Grammars module \s-1API\s0.
You put a grammar into a \f(CW\*(C`qr{...}x\*(C'\fR and apply it the input string you want to
parse. If the parse is successful, you get a data structure of the content in
\&\f(CW\*(C`%/\*(C'\fR.
.PP
\&\s-1IMHO\s0, building a recursive decscent parser entirely inside of a regular
expression, is not the clearest way to code. But, of course, \s-1TMTOWTDI\s0. :)
.SH "TMTOWTDI"
.IX Header "TMTOWTDI"
Here's a Pegex::Regex code snippet:
.PP
.Vb 3
\&    use Pegex::Regex;
\&    $text =~ qr{path/to/grammar_file.pgx};
\&    print $/{foo};
.Ve
.PP
And the equivalent Pegex code:
.PP
.Vb 3
\&    use Pegex;
\&    my $data = pegex(\*(Aqpath/to/grammar_file.pgx\*(Aq)\->parse($text);
\&    print $data\->{foo};
.Ve
.PP
And the more explicit Pegex solution:
.PP
.Vb 6
\&    use Pegex::Grammar;
\&    my $grammar = Pegex::Grammar\->new(
\&        text => \*(Aqpath/to/grammar_file.pgx\*(Aq,
\&    );
\&    my $data = $grammar\->parse($input);
\&    print $data\->{foo};
.Ve
.PP
And even more explicit yet:
.PP
.Vb 10
\&    use Pegex::Grammar;
\&    use Pegex::Compiler;
\&    use Pegex::Parser;
\&    use Pegex::Receiver;
\&    use Pegex::Input;
\&    my $parser = Pegex::Grammar\->new(
\&        grammar => Pegex::Grammar\->new(
\&            tree => Pegex::Compile\->compile(
\&                Pegex::Input\->new(
\&                    file => \*(Aqpath/to/grammar_file.pgx\*(Aq,
\&                )
\&            )\->tree,
\&        ),
\&        parser => \*(AqPegex::Parser\*(Aq,
\&        receiver => \*(AqPegex::Receiver\*(Aq,
\&    );
\&    $parser\->parse(Pegex::Input\->new(string => $input));
\&    print $parser\->receiver\->data\->{foo};
.Ve
.PP
In the last example there are 5 components/classes, all of which you can
subclass to make your perfect parser.
.PP
Pegex::Regex is just a gateway drug. :)
.SH "INPUT OPTIONS"
.IX Header "INPUT OPTIONS"
There are different ways to input a grammar into a Pegex::Regex:
.PP
.Vb 5
\&    qr{
\&        grammar: <as> <text>
\&    }x;
\&    qr{$grammar_in_a_variable}x;
\&    qr{path/to/grammar\-file.pgx};
.Ve
.PP
Make sure to use the \f(CW\*(C`x\*(C'\fR modifier if you are specifying the grammar as a
literal string or in a variable.
.PP
This gateway drug, er, module, technically should not even work.
.PP
It turns your \*(L"grammar inside a regexp\*(R" into a Pegex::Grammar using qr{}
overloading, and then turns your regexp itself into a shim that calls the
parse method for you. This is highly magical and technically makes a reentrant
call to the regex engine, which is not supported yet.  Use at your own risk.
.PP
Better yet, do yourself a favor and learn how to use the Pegex toolset without
this ::Regex sugar.  \f(CW\*(C`:\-)\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Pegex
.IP "\(bu" 4
Regexp::Grammars
.SH "AUTHOR"
.IX Header "AUTHOR"
Ingy do\*:t Net <ingy@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2011. Ingy do\*:t Net.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See http://www.perl.com/perl/misc/Artistic.html
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 95:" 4
.IX Item "Around line 95:"
Unknown directive: =head
