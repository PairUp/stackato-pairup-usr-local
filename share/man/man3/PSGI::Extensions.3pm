.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PSGI::Extensions 3"
.TH PSGI::Extensions 3 "2011-09-05" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PSGI::Extensions \- PSGI extentions
.SH "SPECIFICATION"
.IX Header "SPECIFICATION"
The \s-1PSGI\s0 environment \fB\s-1MAY\s0\fR include the following additional
extensions. They are \fB\s-1OPTIONAL\s0\fR and applications and middleware
components \fB\s-1SHOULD\s0\fR check if they exist in the environment before
using the functionality provided.
.IP "\(bu" 4
\&\f(CW\*(C`psgix.io\*(C'\fR: The raw \s-1IO\s0 socket to access the client connection to do
low-level socket operations. This is only available in \s-1PSGI\s0 servers
that run as an \s-1HTTP\s0 server, and should be used when (and only when)
you want to \fIjailbreak\fR out of \s-1PSGI\s0 abstraction, to implement
protocols over \s-1HTTP\s0 such as \s-1BOSH\s0 or WebSocket.
.IP "\(bu" 4
\&\f(CW\*(C`psgix.input.buffered\*(C'\fR: A boolean which is true if the \s-1HTTP\s0 request
body (for \s-1POST\s0 or \s-1PUT\s0 requests) is buffered using a temporary
filehandle or PerlIO in \f(CW\*(C`psgi.input\*(C'\fR. When this is set, applications
or middleware components can safely \f(CW\*(C`read\*(C'\fR from \f(CW\*(C`psgi.input\*(C'\fR without
worrying about non-blocking I/O and then can call \f(CW\*(C`seek\*(C'\fR to rewind
the input for the transparent access.
.IP "\(bu" 4
\&\f(CW\*(C`psgix.logger\*(C'\fR: A code reference to log messages. The code reference
is passed one argument as a hash reference that represents a message
to be logged. The hash reference \fB\s-1MUST\s0\fR include at least two keys:
\&\f(CW\*(C`level\*(C'\fR and \f(CW\*(C`message\*(C'\fR where \f(CW\*(C`level\*(C'\fR \fB\s-1MUST\s0\fR be one of the following
strings: \f(CW\*(C`debug\*(C'\fR, \f(CW\*(C`warn\*(C'\fR, \f(CW\*(C`info\*(C'\fR, \f(CW\*(C`error\*(C'\fR and \f(CW\*(C`fatal\*(C'\fR. \f(CW\*(C`message\*(C'\fR
\&\fB\s-1SHOULD\s0\fR be a plain string or a scalar variable that stringifies.
.IP "\(bu" 4
\&\f(CW\*(C`psgix.session\*(C'\fR: A hash reference for storing and retrieving session
data. Updates made on this hash reference \fB\s-1SHOULD\s0\fR be persisted by
middleware components and \fB\s-1SHOULD\s0\fR be restored in the succeeding
requests. How to persist and restore session data, as well as how to
identify the requesting clients are implementation specific.
.Sp
\&\f(CW\*(C`psgix.session.options\*(C'\fR: A hash reference to tell Middleware
components how to manipulate session data after the request.
Acceptable keys and values are implementation specific.
.IP "\(bu" 4
\&\f(CW\*(C`psgix.harakiri\*(C'\fR: A boolean which is true if the \s-1PSGI\s0 server supports
harakiri mode, that kills a worker (typically a forked child process)
after the current request is complete.
.Sp
\&\f(CW\*(C`psgix.harakiri.commit\*(C'\fR: A boolean which is set to true by the \s-1PSGI\s0
application or middleware when it wants the server to kill the worker
after the current request.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright Tatsuhiko Miyagawa, 2009\-2011.
.PP
This document is licensed under the Creative Commons license by-sa.
